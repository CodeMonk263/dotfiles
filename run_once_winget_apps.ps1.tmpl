{{ if eq .chezmoi.os "windows" }}{{ if eq .bootstrap "yes" }}
# Get the ID and security principal of the current user account
$myWindowsID=[System.Security.Principal.WindowsIdentity]::GetCurrent()
$myWindowsPrincipal=new-object System.Security.Principal.WindowsPrincipal($myWindowsID)
 
# Get the security principal for the Administrator role
$adminRole=[System.Security.Principal.WindowsBuiltInRole]::Administrator
 
# Check to see if we are currently running "as Administrator"
if ($myWindowsPrincipal.IsInRole($adminRole))
 
   {
   # We are running "as Administrator" - so change the title and background color to indicate this
   $Host.UI.RawUI.WindowTitle = $myInvocation.MyCommand.Definition + "(Elevated)"
   $Host.UI.RawUI.BackgroundColor = "DarkBlue"
   clear-host
 
   }
else
   {
   # We are not running "as Administrator" - so relaunch as administrator
 
   # Create a new process object that starts PowerShell
   $newProcess = new-object System.Diagnostics.ProcessStartInfo "PowerShell";
 
   # Specify the current script path and name as a parameter
   $newProcess.Arguments = $myInvocation.MyCommand.Definition;
 
   # Indicate that the process should be elevated
   $newProcess.Verb = "runas";
 
   # Start the new process
   [System.Diagnostics.Process]::Start($newProcess);
 
   # Exit from the current, unelevated, process
   exit
 
   }

Write-Outout "This script installs the following applications using the winget package manager:
- 7zip
- Visual Studio Code
- Git
- Windows Terminal Preview
- Spotify
- WinDirStat
- VLC
- PowerToys
- Firefox Developer Edition"
winget install --exact 7zip.7zip
winget install --exact Microsoft.VisualStudioCode
winget install --exact Git.Git
winget install --exact Microsoft.WindowsTerminalPreview
winget install --exact Spotify.Spotify
winget install --exact WinDirStat.WinDirStat
winget install --exact VideoLAN.VLC
winget install --exact Microsoft.PowerToys
winget install --exact Mozilla.FirefoxDeveloperEdition
{{ end }}{{ end }}